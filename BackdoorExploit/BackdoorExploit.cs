using Hacknet;

namespace PrincessRTFM.Hacknet.BackdoorExploit;

public class BackdoorExploit {
	public static string FileContents { get; private set; } = null!;
	public const string
		// for ease of testing, debug builds use a new file that can be seen and deleted at a glance
		// real builds are more "realistic" and "infect" the file that looks like it handles networking
#if DEBUG
		FILE_NAME = "sysv.dll",
#else
		FILE_NAME = "netcfgx.dll",
#endif
		FOLDER_NAME = "sys";

	public const string
		XML_ID_FOLDER = "#BACKDOOR_EXPLOIT_FOLDER#",
		XML_ID_FILENAME = "#BACKDOOR_EXPLOIT_FILENAME#",
		XML_ID_CONTENTS = "#BACKDOOR_EXPLOIT_CONTENT#";

	public static void Init(MSRandom rng) => FileContents ??= Computer.generateBinaryString(512, rng);

	private static Folder getTargetFolder(Computer c) => c.files.root.getOrCreateFolder(FOLDER_NAME);

	public static bool IsBackdoorInstalled(Computer c) => c is not null && FolderContainsBackdoor(getTargetFolder(c));

	public static bool FolderContainsBackdoor(Folder folder) => folder.containsFile(FILE_NAME, FileContents);

	public static void Install(Computer c) {
		Folder sys = getTargetFolder(c);
		if (FolderContainsBackdoor(sys))
			return;
		sys.getOrCreateFile(FILE_NAME).data = FileContents;
	}
}
