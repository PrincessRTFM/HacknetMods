using Hacknet;

using PrincessRTFM.Hacknet.BackdoorExploit.Config;

namespace PrincessRTFM.Hacknet.BackdoorExploit;

public class BackdoorExploit {
	public static string FileContents { get; private set; } = null!;

	public const string
		XML_ID_FOLDER = "#BACKDOOR_EXPLOIT_FOLDER#",
		XML_ID_FILENAME = "#BACKDOOR_EXPLOIT_FILENAME#",
		XML_ID_CONTENTS = "#BACKDOOR_EXPLOIT_CONTENT#";

	public static void Init(MSRandom rng) => FileContents ??= Computer.generateBinaryString(512, rng);

	private static Folder? getTargetFolder(Computer? c, bool forceCreationIfMissing = false) {
		string[] path = ModSettings.ExploitFolder.Split(['/'], System.StringSplitOptions.RemoveEmptyEntries);
		Folder? f = c?.files.root;

		foreach (string subfolder in path) {
			f = forceCreationIfMissing ? f?.getOrCreateFolder(subfolder) : f?.searchForFolder(subfolder);
		}

		return f;
	}

	public static bool IsBackdoorInstalled(Computer? c) => FolderContainsBackdoor(getTargetFolder(c));

	public static bool FolderContainsBackdoor(Folder? folder) => folder?.containsFile(ModSettings.ExploitFilename, FileContents) ?? false;

	public static void Install(Computer c) => getTargetFolder(c, true)!.getOrCreateFile(ModSettings.ExploitFilename).data = FileContents;
}
